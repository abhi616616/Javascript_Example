@ var -> we can redeclare and reassign the variable with using the var keyword. and var is a function scoped.
	
	var a=10;
	var a=10;  
	console.log(a)     // redeclare.
	o/p- 10

	var a=10;
	a=10;
	console.log(a)     // reassign
	o/p- 10

	

function f1(){

    var b=20;
    console.log("bbbbbbbb",b);
    if(true){
        var a=10;
        console.log("true",a,b);
    }
    console.log(a);
    console.log(b);
}
f1()


@ let -> we can not redeclare the value but we can reassign the value using with let keyword. let is block-scoped, limiting its visibility to the block where it is declared.

	
	let a=10;
        let a=10;
        console.log(a);
	o/p- SyntaxError: Identifier 'a' has already been declared


	let a=10;
         a=10;
        console.log(a);   // reassign
        o/p- 10


	function f1(){
        let a=10;
        console.log("outerside",a);

           if(true){
              let b=10;
            console.log(a+b);
           }
        }
 
       f1()

@ const -> we can not redeclare and can not reassign the value using with the const keyword. const is also block-scoped and, in addition, cannot be reassigned after its initial assignment.

        const a=10;
        const a=10;
        console.log(a);

	o/p- Identifier 'a' has already been declared

	const a=10;
	a=10;
	console.log(a)

	o/p- TypeError: Assignment to constant variable.




          function f1() {

           const a = 20;
             console.log(a);

                 if (true) {
                     const b = 10;
                      console.log(a + b);
                   }

             }

          f1()




Undefined - When a variable is declared but not assigned, it has the value of undefined and itâ€™s type is also undefined.

Null - It represents a non-existent or a invalid value.


Object - Used to store collection of data.

